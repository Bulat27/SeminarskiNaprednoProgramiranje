package rs.ac.bg.fon.nprog.commonlibrary.domain;

import rs.ac.bg.fon.nprog.commonlibrary.domain.util.EmployeeRole;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * Predstavlja angazovanje zaposlenog.
 * Angazovanje zaposlenog spaja odredjenog zaposlenog sa odredjenom stavkom servisa (popravke).
 * Sadrzi atribute zaposleni, stavkaServisa i trajanje.
 *
 * @author Dragon
 * @version 1.0
 */
public class EmployeeEngagement implements GeneralDObject {

    /**
     * Zaposleni na kojeg se angazovanje odnosi, podrazumevanja vrednost je null.
     */
    private Employee employee;

    /**
     * Stavka servisa (popravke) na koju se angazovanje odnosi, podrazumevana vrednost je null.
     */
    private RepairItem repairItem;

    /**
     * Trajanje (u satima) angazovanja radnika koje se koristi za izracunavanje cene stavke servisa, podrazumevana vrednost je 0.
     */
    private int duration;

    /**
     * Postavlja atribute zaposleni, stavkaServisa i trajanje na njihove podrazumevane vrednosti.
     */
    public EmployeeEngagement() {
    }

    /**
     * Postavlja atribute zaposleni, stavkaServisa i trajanje na unete vrednosti.
     *
     * @param employee   nova vrednost atributa zaposleni
     * @param repairItem nova vrednost atributa stavkaServisa
     * @param duration   nova vrednost atributa trajanje
     */
    public EmployeeEngagement(Employee employee, RepairItem repairItem, int duration) {
        this.employee = employee;
        this.repairItem = repairItem;
        this.duration = duration;
    }

    /**
     * Vraca vrednost atributa zaposleni.
     *
     * @return zaposleni kao Employee
     */
    public Employee getEmployee() {
        return employee;
    }

    /**
     * Postavlja novu vrednost atributa zaposleni.
     *
     * @param employee nova vrednost atributa zaposleni
     */
    public void setEmployee(Employee employee) {
        this.employee = employee;
    }

    /**
     * Vraca vrednost atributa stavkaServisa.
     *
     * @return stavka servisa kao RepairItem
     */
    public RepairItem getRepairItem() {
        return repairItem;
    }

    /**
     * Postavlja novu vrednost atributa stavkaServisa.
     *
     * @param repairItem nova vrednost atributa stavkaServisa
     */
    public void setRepairItem(RepairItem repairItem) {
        this.repairItem = repairItem;
    }

    /**
     * Vraca vrednost atributa trajanje.
     *
     * @return trajanje angazovanja kao int.
     */
    public int getDuration() {
        return duration;
    }

    /**
     * Postavlja novu vrednost atributa trajanje.
     *
     * @param duration nova vrednost atributa trajanje
     */
    public void setDuration(int duration) {
        this.duration = duration;
    }

    @Override
    public String getTableName() {
        return "employee_engagement";
    }

    @Override
    public GeneralDObject getNewRecord(ResultSet rs) throws SQLException {
        Employee e = new Employee(rs.getLong("e.id"), rs.getString("e.first_name"), rs.getString("e.last_name"),
                EmployeeRole.valueOf(rs.getString("e.role")), rs.getBigDecimal("e.hourly_rate"),
                rs.getDate("e.date_of_employment").toLocalDate(), rs.getString("e.username"), rs.getString("e.password"));

        return new EmployeeEngagement(e, repairItem, rs.getInt("eeng.duration"));
    }

    @Override
    public String getInsertionColumns() {
        return "employee_id, repair_id, order_number, duration";
    }

    @Override
    public String getAtrPlaceHolders() {
        return "?, ?, ?, ?";
    }

    @Override
    public void setPreparedStatementParameters(PreparedStatement ps) throws SQLException {
        ps.setLong(1, employee.getEmployeeID());
        ps.setLong(2, repairItem.getRepair().getRepairID());
        ps.setInt(3, repairItem.getOrderNumber());
        ps.setInt(4, duration);
    }

    @Override
    public String getPKWhereCondition() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getAttributeValuesWhereCondition() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getUpdateColumnsWithPlaceHolders() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getFKWhereCondition() {
        return "eeng.repair_id = " + repairItem.getRepair().getRepairID() + " AND eeng.order_number = " + repairItem.getOrderNumber();
    }

    @Override
    public String getJoinCondition() {
        return " eeng JOIN employee e ON eeng.employee_id = e.id";
    }

    @Override
    public void setAutoGeneratedKey(long id) {

    }
}
