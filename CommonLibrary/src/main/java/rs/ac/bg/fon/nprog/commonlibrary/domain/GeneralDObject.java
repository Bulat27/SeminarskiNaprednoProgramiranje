
package rs.ac.bg.fon.nprog.commonlibrary.domain;

import java.io.Serializable;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * Predstavlja interfejs cije je metode potrebno da implementiraju sve domenske klase.
 * Sadrzi skup metoda koje su neophodne za rad sa slojem baza podataka.
 *
 * @author Dragon
 * @version 1.0
 */
public interface GeneralDObject extends Serializable{

    /**
     * Vraca naziv tabele iz baze podataka u okviru koje se cuvaju objekti ove klase.
     *
     * @return naziv tabele baze podataka kao String
     */
    String getTableName();

    /**
     * Kreira i vraca objekat na osnovu vrednosti kolona u tabeli baze podataka.
     * Tabela baze podataka je predstavljenja apstrakcijom ResultSet.
     *
     * @param rs ResultSet na osnovu kog se kreira objekat
     * @return novokreirani objekat na osnovu prosledjenog parametra
     * @throws java.sql.SQLException ukoliko nastane greska prilikom konekcije ili rada sa bazom podataka
     *
     */
    GeneralDObject getNewRecord(ResultSet rs) throws SQLException;

    /**
     * Vraca nazive kolona koje se koriste prilikom cuvanja objekta u bazi podataka.
     *
     * @return nazivi kolona odvojeni zarezima kao String
     */
    String getInsertionColumns();

    /**
     * Vraca String koji se sastoji od znakova pitanja koji se koriste za oznacavanje broja atributa ovog objekta
     * koje je potrebno cuvati u bazi podataka.
     *
     * @return vraca odgovarajuci broj znakova pitanja, koji se koriste kao "placeholder-i" prilikom kreiranja upita,
     * odvojene zarezima, kao String
     */
    String getAtrPlaceHolders();

    /**
     * Postavlja parametre apstrakcije PreparedStatement, koja ce se koristiti za cuvanje ovog objekta
     * u bazu podataka, na odgovarajuce vrednosti atributa ovog objekta.
     *
     * @param ps PreparedStatement ciji ce parametri biti postavljeni na vrednosti atributa objekta
     * @throws SQLException ukoliko nastane greska prilikom konekcije ili rada sa bazom podataka
     */
    void setPreparedStatementParameters(PreparedStatement ps) throws SQLException;

    /**
     * Vraca String koji ce se koristiti kao WHERE uslov prilikom kreiranja upita u bazi podataka.
     * Uslov se formira na osnovu vrednosti atributa objekta koji ce predstavljati primarni kljuc u bazi podataka.
     *
     * @return uslov, koji se odnosi na primarni kljuc u bazi podataka, koriscen u SQL upitu, kao String
     */
    String getPKWhereCondition();

    /**
     * Vraca String koji ce se koristiti kao WHERE uslov prilikom kreiranja upita u bazi podataka.
     * Uslov se formira na osnovu vrednosti atributa objekta koji ce predstavljati spoljni kljuc u bazi podataka.
     *
     * @return uslov, koji se odnosi na spoljni kljuc u bazi podataka, koriscen u SQL upitu, kao String
     */
    String getFKWhereCondition();

    /**
     * Vraca String koji ce se koristiti kao WHERE uslov prilikom kreiranja upita u bazi podataka.
     * Uslov se formira na osnovu vrednosti atributa objekta koji ce se koristiti za pretrazivanje ili filtriranje.
     *
     * @return uslov, koji se odnosi na atribute za pretrazivanje ili filtriranje, koriscen u SQL upitu, kao String
     */
    String getAttributeValuesWhereCondition();

    /**
     * Vraca nazive kolona i znakove pitanja koji imalu ulogu "placeholder-a" odgovarajucih atributa.
     * Ova kombinacija naziva i znakova pitanja se koristi prilikom azuriranja reda u bazi podataka.
     *
     * @return odgovarajucu kombinaciju znakova, koja se koristi prilikom kreiranja upita za azuriranje reda u bazi podataka,
     * kao String
     */
    String getUpdateColumnsWithPlaceHolders();

    /**
     * Vraca String koji ce se koristiti kao WHERE uslov prilikom kreiranja upita u bazi podataka prilikom kog
     * se pristupa kolonama vise od jedne tabele.
     * Uslov se formira na osnovu vrednosti atributa objekta koji ce predstavljati spoljni kljuc u bazi podataka.
     *
     * @return uslov, koji se odnosi na spoljni kljuc u bazi podataka, koriscen u SQL upitu sa vise tabela, kao String
     */
    String getJoinCondition();

    /**
     * Postavlja vrednost atributa koji predstavlja primarni kljuc na vrednost koja je generisana u bazi podataka.
     *
     * @param id generisana vrednost primarnog kljuca
     */
    void setAutoGeneratedKey(long id);
}
